#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Weights(object):
    """
    Attributes:
     - V
     - W

    """


    def __init__(self, V=None, W=None,):
        self.V = V
        self.W = W

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.V = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = []
                        (_etype9, _size6) = iprot.readListBegin()
                        for _i10 in range(_size6):
                            _elem11 = iprot.readDouble()
                            _elem5.append(_elem11)
                        iprot.readListEnd()
                        self.V.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.W = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = []
                        (_etype21, _size18) = iprot.readListBegin()
                        for _i22 in range(_size18):
                            _elem23 = iprot.readDouble()
                            _elem17.append(_elem23)
                        iprot.readListEnd()
                        self.W.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Weights')
        if self.V is not None:
            oprot.writeFieldBegin('V', TType.LIST, 1)
            oprot.writeListBegin(TType.LIST, len(self.V))
            for iter24 in self.V:
                oprot.writeListBegin(TType.DOUBLE, len(iter24))
                for iter25 in iter24:
                    oprot.writeDouble(iter25)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.W is not None:
            oprot.writeFieldBegin('W', TType.LIST, 2)
            oprot.writeListBegin(TType.LIST, len(self.W))
            for iter26 in self.W:
                oprot.writeListBegin(TType.DOUBLE, len(iter26))
                for iter27 in iter26:
                    oprot.writeDouble(iter27)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TrainResult(object):
    """
    Attributes:
     - accepted
     - training_error
     - weights

    """


    def __init__(self, accepted=None, training_error=None, weights=None,):
        self.accepted = accepted
        self.training_error = training_error
        self.weights = weights

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.accepted = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.training_error = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.weights = Weights()
                    self.weights.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TrainResult')
        if self.accepted is not None:
            oprot.writeFieldBegin('accepted', TType.BOOL, 1)
            oprot.writeBool(self.accepted)
            oprot.writeFieldEnd()
        if self.training_error is not None:
            oprot.writeFieldBegin('training_error', TType.DOUBLE, 2)
            oprot.writeDouble(self.training_error)
            oprot.writeFieldEnd()
        if self.weights is not None:
            oprot.writeFieldBegin('weights', TType.STRUCT, 3)
            self.weights.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Weights)
Weights.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'V', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 1
    (2, TType.LIST, 'W', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 2
)
all_structs.append(TrainResult)
TrainResult.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'accepted', None, None, ),  # 1
    (2, TType.DOUBLE, 'training_error', None, None, ),  # 2
    (3, TType.STRUCT, 'weights', [Weights, None], None, ),  # 3
)
fix_spec(all_structs)
del all_structs
